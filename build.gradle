buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
		// path to snippets generated by Spring REST Docs
		snippetsDir = file('build/generated-snippets')
		// used by Spring Auto REST Docs
		javadocJsonDir = file("$buildDir/generated-javadoc-json")
	}
	repositories {
		mavenCentral()
		// used for restdoc-apispec
		jcenter() 
		// asciidoctor diagram
        maven {url = uri("https://jitpack.io") }
        // dependency asciidoctor-diagram/viz.js
        maven {url "https://plugins.gradle.org/m2/"}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		// restdoc-apispec
		classpath("com.epages:restdocs-api-spec-gradle-plugin:0.6.0")
		// fetching from confluence    
	    classpath 'net.sourceforge.htmlcleaner:htmlcleaner:2.4'
	    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'    
	    
	    // diagram
	    classpath "com.github.jruby-gradle:jruby-gradle-plugin:[1.1.4,2.0)"
	    // graphiz; you might also have graphviz installed
	    classpath 'com.github.jeysal:gradle-graphviz-plugin:master-SNAPSHOT'
	}
}

// needed for Spring Auto REST Docs
configurations {
    jsondoclet
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// asciidoctor
apply plugin: 'org.asciidoctor.convert'
// restdocs-apispec
apply plugin: 'com.epages.restdocs-api-spec'
// diagram
apply plugin: 'com.github.jruby-gradle.base'
// graphviz
apply plugin: 'com.github.jeysal.graphviz'

group = 'com.heidelpay.jm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	// restdoc-apispec
	jcenter()
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-validation')
	implementation('org.springframework.boot:spring-boot-starter-web')
	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	runtimeOnly('com.h2database:h2')
	testImplementation('org.springframework.boot:spring-boot-starter-test')

	// diagram 
	gems 'rubygems:asciidoctor-diagram:1.5.11'
	
	// enable asciidoctor task
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.3.RELEASE' 
	// Spring REST Docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'
	// Spring Auto REST Docs
	testImplementation 'capital.scalable:spring-auto-restdocs-core:2.0.3'
	jsondoclet 'capital.scalable:spring-auto-restdocs-json-doclet:2.0.3'
	
	// restdoc-apispec
	testCompile('com.epages:restdocs-api-spec-mockmvc:0.8.0')
	

}

openapi {
    basePath = "/api"
    host = "localhost:8080"
    schemes = ["https"]
    format = "json"
    title = 'heidelpay API'
    version = "1.0.0"
    separatePublicApi = true
    snippetsDirectory="build/generated-snippets/openapi/spec/charge"
    outputDirectory="build/openapi/"

}

openapi3 {
	server = 'http://localhost:8080'
	title = 'heidelpay API'
	version = '0.1.0'
	format = 'json'
	outputDirectory="build/openapi/"
	snippetsDirectory="build/generated-snippets/openapi/spec/charge"
}

// used by Spring REST Docs
task jsonDoclet(type: Javadoc, dependsOn: compileJava) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = javadocJsonDir 
    options.docletpath = configurations.jsondoclet.files.asType(List)
    options.doclet = 'capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet'
    options.memberLevel = JavadocMemberLevel.PACKAGE
}

test { 
	// folder used by spring restdoc
	outputs.dir snippetsDir
	
	// Spring Auto REST Docs
	systemProperty 'org.springframework.restdocs.outputDir', snippetsDir 
    systemProperty 'org.springframework.restdocs.javadocJsonDir', javadocJsonDir 
    // call for auto REST Doc
    dependsOn jsonDoclet
}

task("slate", dependsOn: test) {
	
	doLast {
		String indexFile = 'src/docs/index.md.gsp'
		def template = new groovy.text.SimpleTemplateEngine().createTemplate(new File(indexFile)).make()
	    mkdir "build/slate"
	    new File("build/slate/index.html.md").write(template.toString())	    
	}
}

// NOTE: call gradlew importConfluence -Dorg.gradle.daemon=false --console=plain
// --> System.console() from where the pwd is read won't work
task("importConfluence") {
  mkdir "build/generated-snippets/confluence"
	doLast {  
	    binding.setProperty("outputDir", new File("build/generated-snippets/confluence"))
	    binding.setProperty("pages",[   [ 'id':'72286211', 'title':'intro'],[ 'id':'72417281', 'title':'Info' ] ] )
	    evaluate(new File("src/build/confluenceImport.groovy"))
	}
	
}
// NOTE: call gradlew asciidoctor -Dorg.gradle.daemon=false --console=plain
// --> System.console() from where the pwd is read won't work
asciidoctor { 
	sourceDir = file('src/docs')
	outputDir = file('build/docs')
	// execute tests first for Spring REST Docs; jRubyPrepare for diagram plugin
	dependsOn jrubyPrepare, test, importConfluence
	mustRunAfter importConfluence, test 
	
	requires = ['asciidoctor-diagram']
  	gemPath = jrubyPrepare.outputDir
  	
}

task("docs") {
    dependsOn asciidoctor, slate
}

// optional task: ship docs as static content
bootJar {
	dependsOn docs 
	from ("${asciidoctor.outputDir}/html5") { 
		into 'static/docs'
	}
}


